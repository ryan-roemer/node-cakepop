// Generated by CoffeeScript 1.3.3
(function() {
  var CoffeeBuild, Style, Utils, async, child_proc, colors, extend, fileUtils,
    __slice = [].slice,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  child_proc = require('child_process');

  async = require('async');

  colors = require('colors');

  extend = require('deep-extend');

  fileUtils = require('./file-utils');

  colors.setTheme({
    silly: 'rainbow',
    input: 'grey',
    verbose: 'cyan',
    prompt: 'grey',
    info: 'green',
    data: 'grey',
    help: 'cyan',
    warn: 'yellow',
    debug: 'blue',
    error: 'red'
  });

  Utils = (function() {

    function Utils() {}

    Utils.print = function(data) {
      if (Array.isArray(data)) {
        data = "[" + (data.join(', ')) + "]";
      }
      data = (data != null ? data : "").toString().replace(/[\r\n]+$/, "");
      if (data) {
        return console.log(data);
      }
    };

    Utils.printCallback = function(err, data) {
      var _ref;
      return Utils.print((_ref = err != null ? err : data) != null ? _ref : "Done.".info);
    };

    Utils.fail = function(msg) {
      if (msg) {
        process.stderr.write(("" + msg + "\n").error.bold);
      }
      return process.exit(1);
    };

    Utils.spawn = function() {
      var allArgs, args, argsLen, callback, cmd, opts, ps;
      allArgs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      argsLen = allArgs.length;
      cmd = allArgs[0];
      args = allArgs[1];
      opts = argsLen === 4 ? allArgs[2] : {};
      callback = argsLen > 2 ? allArgs[argsLen - 1] : null;
      Utils.print([cmd, args.join(" ")].join(" "));
      ps = child_proc.spawn(cmd, args, opts);
      ps.stdout.pipe(process.stdout);
      ps.stderr.pipe(process.stderr);
      if (callback) {
        return ps.on("exit", callback);
      }
    };

    Utils.exec = function() {
      var allArgs, argsLen, callback, cmd, opts;
      allArgs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      argsLen = allArgs.length;
      cmd = allArgs[0];
      opts = argsLen === 3 ? allArgs[1] : {};
      callback = argsLen > 1 ? allArgs[argsLen - 1] : null;
      if (!callback) {
        callback = Utils.printCallback;
      }
      Utils.print(cmd);
      return child_proc.exec(cmd, opts, function(error, stdout, stderr) {
        if (stderr) {
          process.stderr.write(stderr);
        }
        return callback(error, stdout.toString());
      });
    };

    Utils.pids = function(pattern, callback) {
      var cmd;
      if (callback == null) {
        callback = Utils.printCallback;
      }
      cmd = "ps ax | egrep \"" + pattern + "\" | egrep -v egrep || true";
      return Utils.exec(cmd, function(err, matches) {
        var m, _ref;
        matches = (_ref = matches != null ? matches.split("\n") : void 0) != null ? _ref : [];
        matches = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = matches.length; _i < _len; _i++) {
            m = matches[_i];
            if (m) {
              _results.push(m.match(/\s*([0-9]+)/)[0]);
            }
          }
          return _results;
        })();
        return callback(err, matches);
      });
    };

    Utils.find = function(dirs, pattern, callback) {
      var finder;
      if (dirs == null) {
        dirs = ["./"];
      }
      if (callback == null) {
        callback = Utils.printCallback;
      }
      finder = function(dir, cb) {
        var file, filter, paths;
        if (typeof pattern === 'string') {
          pattern = new RegExp(pattern);
        }
        paths = [];
        file = new fileUtils.File(dir);
        filter = function(name, path) {
          if (pattern.test(name)) {
            paths.push(path);
          }
          return true;
        };
        return file.list(filter, function(err) {
          return cb(err, paths);
        });
      };
      return async.map(dirs, finder, function(err, results) {
        var files, r, _i, _len;
        files = [];
        if (!err) {
          for (_i = 0, _len = results.length; _i < _len; _i++) {
            r = results[_i];
            files = files.concat(r);
          }
        }
        return callback(err, files);
      });
    };

    return Utils;

  }).call(this);

  CoffeeBuild = (function() {

    function CoffeeBuild(opts) {
      this.watch = __bind(this.watch, this);

      this.build = __bind(this.build, this);

      this._build = __bind(this._build, this);

      var defaults, _ref;
      defaults = {
        coffee: {
          bin: "coffee",
          suffix: "coffee"
        }
      };
      this.coffee = extend(defaults.coffee, (_ref = opts != null ? opts.coffee : void 0) != null ? _ref : {});
    }

    CoffeeBuild.prototype._build = function(paths, watch, callback) {
      var argsBase, build, buildDir, cbs, dirs, files, p,
        _this = this;
      files = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = paths.length; _i < _len; _i++) {
          p = paths[_i];
          if (typeof p === 'string') {
            _results.push(p);
          }
        }
        return _results;
      })();
      dirs = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = paths.length; _i < _len; _i++) {
          p = paths[_i];
          if (typeof p !== 'string') {
            _results.push(p);
          }
        }
        return _results;
      })();
      argsBase = watch ? ["--watch"] : [];
      build = function(args, cb) {
        return Utils.spawn("" + _this.coffee.bin, argsBase.concat(args), function(code) {
          var err;
          err = code === 0 ? null : new Error("build failed");
          return cb(err);
        });
      };
      buildDir = function(pair, cb) {
        var dst, src;
        src = Object.keys(pair)[0];
        dst = pair[src];
        return build(["--compile", "--output", dst, src], cb);
      };
      cbs = {
        buildFiles: function(cb) {
          if (files.length < 1) {
            return cb(null);
          }
          return build(["--compile"].concat(files), cb);
        },
        buildDirs: function(cb) {
          return async.forEach(dirs, buildDir, cb);
        }
      };
      return async.parallel(cbs, function(err) {
        return callback(err);
      });
    };

    CoffeeBuild.prototype.build = function(paths, callback) {
      if (paths == null) {
        paths = [];
      }
      if (callback == null) {
        callback = Utils.printCallback;
      }
      return this._build(paths, false, callback);
    };

    CoffeeBuild.prototype.watch = function(paths, callback) {
      if (paths == null) {
        paths = [];
      }
      if (callback == null) {
        callback = Utils.printCallback;
      }
      return this._build(paths, true, callback);
    };

    return CoffeeBuild;

  })();

  Style = (function() {

    function Style(opts) {
      this.jshint = __bind(this.jshint, this);

      this.coffeelint = __bind(this.coffeelint, this);

      var defaults, _ref, _ref1;
      defaults = {
        coffee: {
          bin: "coffeelint",
          suffix: "coffee",
          config: null,
          configOpt: "--file",
          type: "CoffeeScript",
          filesPat: ["Cakefile"]
        },
        js: {
          bin: "jshint",
          suffix: "js",
          config: null,
          configOpt: "--config",
          type: "JavaScript",
          filesPat: []
        }
      };
      this.coffee = extend(defaults.coffee, (_ref = opts != null ? opts.coffee : void 0) != null ? _ref : {});
      this.js = extend(defaults.js, (_ref1 = opts != null ? opts.js : void 0) != null ? _ref1 : {});
    }

    Style.prototype._lint = function(paths, cfg, callback) {
      var cbs, config, dirs, f, files, filesRe, pattern,
        _this = this;
      pattern = cfg.filesPat.concat([".*\\." + cfg.suffix]).join("|");
      filesRe = new RegExp("(" + pattern + ")$");
      config = cfg.config ? [cfg.configOpt, cfg.config] : [];
      files = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = paths.length; _i < _len; _i++) {
          f = paths[_i];
          if (filesRe.test(f)) {
            _results.push(f);
          }
        }
        return _results;
      })();
      dirs = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = paths.length; _i < _len; _i++) {
          f = paths[_i];
          if (!filesRe.test(f)) {
            _results.push(f);
          }
        }
        return _results;
      })();
      cbs = {
        searchDirs: function(cb) {
          if (dirs.length < 1) {
            return cb(null, []);
          }
          return Utils.find(dirs, filesRe, function(err, dirFiles) {
            return cb(err, dirFiles);
          });
        },
        runLint: [
          "searchDirs", function(cb, results) {
            var allFiles, args, _ref;
            allFiles = files.concat((_ref = results != null ? results.searchDirs : void 0) != null ? _ref : []);
            args = allFiles.concat(config);
            if (allFiles.length < 1) {
              Utils.print(("No " + cfg.type + " files found.\n").info);
              cb(null);
              return;
            }
            return Utils.spawn("" + cfg.bin, args, function(code) {
              var err;
              err = code === 0 ? null : new Error("checks failed");
              return cb(err);
            });
          }
        ]
      };
      return async.auto(cbs, function(err) {
        if (err) {
          Utils.fail("" + cfg.type + " style checks failed. (" + err + ")");
        }
        Utils.print(("" + cfg.type + " style checks passed.\n").info);
        return callback(err);
      });
    };

    Style.prototype.coffeelint = function(paths, callback) {
      if (paths == null) {
        paths = [];
      }
      if (callback == null) {
        callback = Utils.printCallback;
      }
      return this._lint(paths, this.coffee, callback);
    };

    Style.prototype.jshint = function(paths, callback) {
      if (paths == null) {
        paths = [];
      }
      if (callback == null) {
        callback = Utils.printCallback;
      }
      return this._lint(paths, this.js, callback);
    };

    return Style;

  })();

  module.exports = {
    utils: Utils,
    CoffeeBuild: CoffeeBuild,
    Style: Style
  };

}).call(this);
